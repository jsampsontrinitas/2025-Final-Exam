/**
 * DO NOT EDIT THIS FILE
 */

document.addEventListener('DOMContentLoaded', () => {

    // Define logical groups of tests
    const testGroups = [
        {
            name: "HTML Structure",
            tests: [
                ["has <!DOCTYPE>", () => document.doctype?.name === 'HTML'],
                ["has <html>", () => document.querySelector('html') !== null],
                ["has <head>", () => document.querySelector('head') !== null],
                ["has <body>", () => document.querySelector('body') !== null],
            ]
        },
        {
            name: "Main Content",
            tests: [
                ["has <h1>", () => document.querySelector('h1#mainHeading') !== null],
                ["h1 textContent", () => document.querySelector('h1#mainHeading')?.textContent === 'Hello, Trinitas!'],
                ["has <p>", () => document.querySelector('p#greeting') !== null],
                ["greeting textContent", () => !!document.querySelector('p#greeting')?.textContent?.length],
                ["greeting textContent is not empty", () => document.querySelector('p#greeting')?.textContent !== ''],
                ["greeting textContent is not 'undefined'", () => document.querySelector('p#greeting')?.textContent !== 'undefined'],
                ["greeting textContent is not 'null'", () => document.querySelector('p#greeting')?.textContent !== 'null'],
                ["greeting textContent is not 'NaN'", () => document.querySelector('p#greeting')?.textContent !== 'NaN'],
            ]
        },
        {
            name: "List and Controls",
            tests: [
                ["has <ul>", () => document.querySelector('ul#list') !== null],
                ["has <input>", () => document.querySelector('input#newItem') !== null],
                ["has <button> (add)", () => document.querySelector('button#addItem') !== null],
                ["has <button> (clear)", () => document.querySelector('button#clearList') !== null],
                ["addItem value is empty", () => document.querySelector('input#newItem')?.value === ''],
                ["addItem value is not undefined", () => document.querySelector('input#newItem')?.value !== undefined],
                ["addItem value is not null", () => document.querySelector('input#newItem')?.value !== null],
                ["addItem value is not NaN", () => document.querySelector('input#newItem')?.value !== NaN],
            ]
        },
        {
            name: "CSS Styles",
            tests: []
        },
        {
            name: "JavaScript",
            tests: []
        },
    ];

    // Themes for our test output
    const themes = {
        light: {
            background: '#fff',
            color: '#000',
            border: '1px solid #000'
        },
        dark: {
            background: '#333',
            color: '#fff',
            border: '1px solid #fff'
        }
    };

    // Determine which theme to use
    const theme = window.matchMedia('(prefers-color-scheme: dark)').matches ? themes.dark : themes.light;

    setTimeout(() => {

        let passed = 0;
        let total = 0;

        console.clear();

        for (const group of testGroups) {

            console.group(`%c${group.name}`, `color: ${theme.color}; font-weight: bold;`);

            for (const [name, fn] of group.tests) {

                total++;

                try {
                    if (typeof fn === 'function' && fn()) {
                        passed++;
                        console.log(`✅ Test "${name}" passed`);
                    } else {
                        console.warn(`❌ Test "${name}" failed`);
                    }
                } catch (error) {
                    console.error(`❌ Test "${name}" failed with error:`, error);
                }
            }

            console.groupEnd();
        }

        console.log(`%c${passed} of ${total} tests passed.`, `color: ${theme.color}; font-weight: bold;`);

    }, 1000);

});
